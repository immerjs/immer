"use strict";(self.webpackChunkimmer_website=self.webpackChunkimmer_website||[]).push([[373],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,g=m["".concat(p,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4042:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(8168),r=n(8587),i=(n(6540),n(5680)),o=["components"],l={id:"produce",title:"Using produce"},p=void 0,s={unversionedId:"produce",id:"produce",title:"Using produce",description:"<div",source:"@site/docs/produce.mdx",sourceDirName:".",slug:"/produce",permalink:"/immer/produce",draft:!1,editUrl:"https://github.com/immerjs/immer/edit/main/website/docs/produce.mdx",tags:[],version:"current",frontMatter:{id:"produce",title:"Using produce"},sidebar:"Immer",previous:{title:"Installation",permalink:"/immer/installation"},next:{title:"Curried producers",permalink:"/immer/curried-produce"}},d={},m=[{value:"Example",id:"example",level:2},{value:"Terminology",id:"terminology",level:3}],u={toc:m};function c(e){var t=e.components,n=(0,r.A)(e,o);return(0,i.yg)("wrapper",(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("center",null,(0,i.yg)("div",{"data-ea-publisher":"immerjs","data-ea-type":"image",className:"horizontal bordered"})),(0,i.yg)("details",null,(0,i.yg)("summary",{className:"egghead-summary"},"egghead.io lesson 3: Simplifying deep updates with _produce_"),(0,i.yg)("br",null),(0,i.yg)("div",null,(0,i.yg)("iframe",{width:"760",height:"427",scrolling:"no",src:"https://egghead.io/lessons/javascript-simplify-deep-state-updates-using-immer-produce/embed"})),(0,i.yg)("a",{className:"egghead-link",href:"https://egghead.io/lessons/javascript-simplify-deep-state-updates-using-immer-produce"},"Hosted on egghead.io")),(0,i.yg)("p",null,"The Immer package exposes a ",(0,i.yg)("inlineCode",{parentName:"p"},"produce")," function that does all the work."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"produce(baseState, recipe: (draftState) => void): nextState")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"produce")," takes a base state, and a ",(0,i.yg)("em",{parentName:"p"},"recipe")," that can be used to perform all the desired mutations on the ",(0,i.yg)("inlineCode",{parentName:"p"},"draft")," that is passed in. The interesting thing about Immer is that the ",(0,i.yg)("inlineCode",{parentName:"p"},"baseState")," will be untouched, but the ",(0,i.yg)("inlineCode",{parentName:"p"},"nextState")," will reflect all changes made to ",(0,i.yg)("inlineCode",{parentName:"p"},"draftState"),"."),(0,i.yg)("p",null,"Inside the recipe, all standard JavaScript APIs can be used on the ",(0,i.yg)("inlineCode",{parentName:"p"},"draft")," object, including field assignments, ",(0,i.yg)("inlineCode",{parentName:"p"},"delete")," operations, and mutating array, Map and Set operations like ",(0,i.yg)("inlineCode",{parentName:"p"},"push"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"pop"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"splice"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"set"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"sort"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"remove"),", etc."),(0,i.yg)("p",null,"Any of those mutations don't have to happen at the root, but it is allowed to modify anything anywhere deep inside the draft: ",(0,i.yg)("inlineCode",{parentName:"p"},'draft.todos[0].tags["urgent"].author.age = 56')),(0,i.yg)("p",null,"Note that the recipe function itself normally doesn't return anything. However, it is possible to return in case you want to replace the ",(0,i.yg)("inlineCode",{parentName:"p"},"draft")," object in its entirety with another object, for more details see ",(0,i.yg)("a",{parentName:"p",href:"/immer/return"},"returning new data"),"."),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},'import {produce} from "immer"\n\nconst baseState = [\n    {\n        title: "Learn TypeScript",\n        done: true\n    },\n    {\n        title: "Try Immer",\n        done: false\n    }\n]\n\nconst nextState = produce(baseState, draftState => {\n    draftState.push({title: "Tweet about it"})\n    draftState[1].done = true\n})\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"// the new item is only added to the next state,\n// base state is unmodified\nexpect(baseState.length).toBe(2)\nexpect(nextState.length).toBe(3)\n\n// same for the changed 'done' prop\nexpect(baseState[1].done).toBe(false)\nexpect(nextState[1].done).toBe(true)\n\n// unchanged data is structurally shared\nexpect(nextState[0]).toBe(baseState[0])\n// ...but changed data isn't.\nexpect(nextState[1]).not.toBe(baseState[1])\n")),(0,i.yg)("h3",{id:"terminology"},"Terminology"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"(base)state"),", the immutable state passed to ",(0,i.yg)("inlineCode",{parentName:"li"},"produce")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"recipe"),": the second argument of ",(0,i.yg)("inlineCode",{parentName:"li"},"produce"),', that captures how the base state should be "mutated".'),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"draft"),": the first argument of any ",(0,i.yg)("inlineCode",{parentName:"li"},"recipe"),", which is a proxy to the original base state that can be safely mutated."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"producer"),". A function that uses ",(0,i.yg)("inlineCode",{parentName:"li"},"produce")," and is generally of the form ",(0,i.yg)("inlineCode",{parentName:"li"},"(baseState, ...arguments) => resultState"))),(0,i.yg)("p",null,"Note that it isn't strictly necessary to name the first argument of the recipe ",(0,i.yg)("inlineCode",{parentName:"p"},"draft"),". You can name it anything you want, for example ",(0,i.yg)("inlineCode",{parentName:"p"},"users"),". Using ",(0,i.yg)("inlineCode",{parentName:"p"},"draft"),' as a name is just a convention to signal: "mutation is OK here".'))}c.isMDXComponent=!0}}]);