// @flow

export interface Patch {
    op: "replace" | "remove" | "add",
    path: (string|number)[],
    value?: any
}

export type PatchListener = (patches: Patch[], inversePatches: Patch[]) => void

interface IProduce {
    /**
     * Immer takes a state, and runs a function against it.
     * That function can freely mutate the state, as it will create copies-on-write.
     * This means that the original state will stay unchanged, and once the function finishes, the modified state is returned.
     *
     * If the first argument is a function, this is interpreted as the recipe, and will create a curried function that will execute the recipe
     * any time it is called with the current state.
     *
     * @param currentState - the state to start with
     * @param recipe - function that receives a proxy of the current state as first argument and which can be freely modified
     * @param initialState - if a curried function is created and this argument was given, it will be used as fallback if the curried function is called with a state of undefined
     * @returns The next state: a new state, or the current state if nothing was modified
     */
    <S, R: S | void>(
        currentState: S,
        recipe: (draftState: S) => R,
        patchListener?: PatchListener
    ): R;
    // curried invocations with inital state
    <S, A, B, C, R: S | void>(
        recipe: (draftState: S, a: A, b: B, c: C) => R,
        initialState: S
    ): (currentState: S | void, a: A, b: B, c: C) => R;
    <S, A, B, R: S | void>(
        recipe: (draftState: S, a: A, b: B) => R,
        initialState: S
    ): (currentState: S | void, a: A, b: B) => R;
    <S, A, R: S | void>(
        recipe: (draftState: S, a: A) => R,
        initialState: S
    ): (currentState: S | void, a: A) => R;
    <S, R: S | void>(
        recipe: (draftState: S) => R,
        initialState: S
    ): (currentState: S | void) => R;
    <S, R: S | void>(
        recipe: (draftState: S, ...extraArgs: any[]) => R,
        initialState: S
    ): (currentState: S | void, ...extraArgs: any[]) => R;
    // curried invocations without inital state
    <S, A, B, C, R: S | void>(
        recipe: (draftState: S, a: A, b: B, c: C) => R
    ): (currentState: S, a: A, b: B, c: C) => R;
    <S, A, B, R: S | void>(
        recipe: (draftState: S, a: A, b: B) => R
    ): (currentState: S, a: A, b: B) => R;
    <S, A, R: S | void>(
        recipe: (draftState: S, a: A) => R
    ): (currentState: S, a: A) => R;
    <S, R: S | void>(
        recipe: (draftState: S) => R
    ): (currentState: S) => R;
    <S, R: S | void>(
        recipe: (draftState: S, ...extraArgs: any[]) => R
    ): (currentState: S, ...extraArgs: any[]) => R;
}

declare export var produce: IProduce
declare export default IProduce

declare export var nothing: typeof undefined

/**
 * Automatically freezes any state trees generated by immer.
 * This protects against accidental modifications of the state tree outside of an immer function.
 * This comes with a performance impact, so it is recommended to disable this option in production.
 * By default it is turned on during local development, and turned off in production.
 */
declare export function setAutoFreeze(autoFreeze: boolean): void

/**
 * Manually override whether proxies should be used.
 * By default done by using feature detection
 */
declare export function setUseProxies(useProxies: boolean): void

declare export function applyPatches<S>(state: S, patches: Patch[]): S

declare export function original<S>(value: S): ?S